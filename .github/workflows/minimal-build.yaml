name: Minimal Windows Build (Cached)
on:
  workflow_dispatch:
jobs:
  build:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: win64

      # 🚀 CACHING ENABLED HERE
      - name: Cache Chocolatey packages
        uses: actions/cache@v4
        with:
          path: |
            C:\ProgramData\chocolatey
            C:\Program Files\OpenSSL
            C:\tools\ninja
            C:\liboqs
          key: ${{ runner.os }}-choco-deps-v4
          restore-keys: |
            ${{ runner.os }}-choco-

      # 🎯 SMART INSTALLATION (only if not cached)
      - name: Install dependencies via Chocolatey
        run: |
          # Check for OpenSSL 3.x specifically
          $openssl_version = ""
          try {
            $openssl_version = & "C:\Program Files\OpenSSL\bin\openssl.exe" version 2>$null
            if ($openssl_version -match "OpenSSL 3\.") {
              Write-Host "✅ OpenSSL 3.x found: $openssl_version"
            } else {
              Write-Host "❌ Found older OpenSSL: $openssl_version"
              Write-Host "Installing OpenSSL 3.x..."
              choco install openssl --version=3.5.0 --force --quiet --yes
            }
          } catch {
            Write-Host "Installing OpenSSL 3.x..."
            choco install openssl --version=3.5.0 --force --quiet --yes
          }
          
          # Install Ninja if not present
          if (-not (Test-Path "C:\tools\ninja\ninja.exe")) {
            Write-Host "Installing Ninja via Chocolatey..."
            choco install ninja --quiet --yes
          } else {
            Write-Host "✅ Ninja found in cache"
          }
          
          # Auto-detect OpenSSL location
          $openssl_paths = @(
            "C:\Program Files\OpenSSL",
            "C:\Program Files\OpenSSL-Win64", 
            "C:\OpenSSL",
            "C:\OpenSSL-Win64"
          )
          
          foreach ($path in $openssl_paths) {
            if (Test-Path "$path\bin\openssl.exe") {
              Write-Host "Found OpenSSL at: $path"
              echo "OPENSSL_ROOT_DIR=$path" >> $env:GITHUB_ENV
              break
            }
          }

      - name: Verify OpenSSL installation
        run: |
          Write-Host "OpenSSL location: $env:OPENSSL_ROOT_DIR"
          if (Test-Path "$env:OPENSSL_ROOT_DIR\bin\openssl.exe") {
            & "$env:OPENSSL_ROOT_DIR\bin\openssl.exe" version
            Write-Host "✅ OpenSSL verified"
          } else {
            Write-Host "❌ OpenSSL not found"
            exit 1
          }

      - name: Build and Install liboqs
        run: |
          # Check if liboqs is already built (from cache)
          if (-not (Test-Path "C:\liboqs\lib\cmake\liboqs\liboqsConfig.cmake")) {
            Write-Host "Building liboqs..."
            
            # Clone liboqs
            git clone --depth 1 https://github.com/open-quantum-safe/liboqs.git C:\liboqs-src
            
            # Build liboqs
            mkdir C:\liboqs-build
            cd C:\liboqs-build
            
            cmake -GNinja `
              -DCMAKE_BUILD_TYPE=Release `
              -DCMAKE_INSTALL_PREFIX=C:\liboqs `
              -DBUILD_SHARED_LIBS=OFF `
              -DOQS_BUILD_ONLY_LIB=ON `
              C:\liboqs-src
              
            ninja install
            
            Write-Host "✅ liboqs built and installed"
          } else {
            Write-Host "✅ liboqs found in cache"
          }
          
          # Set liboqs path for oqs-provider
          echo "liboqs_DIR=C:\liboqs\lib\cmake\liboqs" >> $env:GITHUB_ENV

      - name: Build OQS Provider
        run: |
          mkdir build
          cd build
          cmake -GNinja `
            -DCMAKE_BUILD_TYPE=Release `
            -DOQS_MINIMAL_BUILD=ON `
            -DBUILD_SHARED_LIBS=OFF `
            -DBUILD_TESTING=OFF `
            -DOPENSSL_ROOT_DIR="$env:OPENSSL_ROOT_DIR" `
            -Dliboqs_DIR="$env:liboqs_DIR" `
            ..
          ninja oqsprov

      - name: Create Artifact Directory
        run: |
          mkdir artifacts
          Copy-Item "build\oqsprov\oqsprov.dll" -Destination "artifacts\"

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: oqs-provider-windows-minimal
          path: artifacts\
          retention-days: 7
